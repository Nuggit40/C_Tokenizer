input: "()[].->sizeof,!~>><<^|++--+/||&&?:==!=<><=>==+=-=*=/=%=>>=<<=&=^=|=&-*"
output:
left parenthesis: "("
right parenthesis: ")"
left bracket: "["
right bracket: "]"
structure member: "."
structure pointer: "->"
sizeof: "sizeof"
comma: ","
negate: "!"
1s complement: "~"
shift right: ">>"
shift left "<<"
bitwise XOR: "^"
bitwise OR: "|"
increment: "++"
decrement: "--"
addition: "+"
division: "/"
logical OR "||"
logical AND: "&&"
conditional true: "?"
conditional false: ":"
equality test: "=="
inequality test: "!="
less than test: "<"
greater than test: ">"
less than or equal test: "<="
greater than or equal test: ">="
assignment: "="
plus equals: "+="
minus equals: "-="
times equals: "*="
divide equals: "/="
mod equals: "%="
shift right equals: ">>="
shift left equals: "<<="
bitwise AND equals: "&="
bitwise XOR equals: "|="
AND/address operator: "&"
minus/subtract operator: "-"
multiply/dereference operator: "*"

input: "auto	break case char continue do default const double else enum extern for if goto float int long register signed static short struct switch typedef union void while volatile unsigned"
output: 
"Keyword - auto"
"Keyword - break"
"Keyword - case"
"Keyword - char"
"Keyword - continue"
"Keyword - do"
"Keyword - default"
"Keyword - const"
"Keyword - double"
"Keyword - else"
"Keyword - enum"
"Keyword - extern"
"Keyword - for"
"Keyword - if"
"Keyword - goto"
"Keyword - float"
"Keyword - int"
"Keyword - long"
"Keyword - register"
"Keyword - signed"
"Keyword - static"
"Keyword - short"
"Keyword - struct"
"Keyword - switch"
"Keyword - typedef"
"Keyword - union"
"Keyword - void"
"Keyword - while"
"Keyword - volatile"
"Keyword - unsigned"

input: ""
output:

input: "123.5E+12abc123 0x5 0x 0 1"
output:
floating point: "123.5E+12"
word: "abc123"
hexadecimal integer: "0x5"
hexadecimal integer: "0x"
octal integer: "0"
decimal integer: "1"
